// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum RunStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
  TIMEOUT
  CANCELLED
}

enum JobStatus {
  PENDING
  RUNNING
  STREAMING
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
}

enum SandboxTemplate {
  NODE_22
  PYTHON_311
  NEXT_15
  REACT_19
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PromptRole {
  USER
  ASSISTANT
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  passwordHash     String?
  bio              String?
  resumeUrl        String?
  githubUrl        String?
  linkedinUrl      String?
  stats            Stats?
  posts            Post[]
  projects         Project[]
  projectTeammates ProjectMember[]
  dsaResults       DSAResult[]
  applications     JobApplication[]
  jobsPosted       Job[]
  comments         Comment[]
  messagesSent     Message[]          @relation("UserMessages")
  messageReads     MessageRead[]
  interviewHost    InterviewSession[] @relation("host")
  interviewGuest   InterviewSession[] @relation("guest")
  codeExecutions   CodeExecution[]
  sandboxUsage     SandboxUsage[] // NEW
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ChatParticipant  ChatParticipant[]
}

model Stats {
  id        String @id @default(uuid())
  userId    String @unique
  solvedDSA Int
  projects  Int
  posts     Int
  User      User   @relation(fields: [userId], references: [id])
}

model Project {
  id            String          @id @default(uuid())
  title         String
  description   String?
  prompts       Prompt[] // renamed from prompt
  members       ProjectMember[]
  executions    CodeExecution[] // NEW
  previewUrl    String? // NEW - for external preview
  repositoryUrl String? // NEW - git integration
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  isPublic      Boolean         @default(false) // NEW
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model Prompt {
  id        String     @id @default(uuid())
  role      PromptRole
  content   String     @db.Text // Changed for larger content
  metadata  Json? // NEW - store tokens, model info, etc
  createdBy String
  createdAt DateTime   @default(now())
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdAt])
}

model CodeExecution {
  id           String    @id @default(uuid())
  projectId    String
  userId       String
  triggerJobId String    @unique // Trigger.dev job ID
  status       JobStatus @default(PENDING)

  // AI Generation
  aiModel          String? // e.g., "groq/gpt-oss-120b"
  generatedCode    String? @db.Text
  promptTokens     Int?
  completionTokens Int?

  // Sandbox Execution
  sandboxId       String?
  sandboxTemplate SandboxTemplate?
  sandboxLogs     SandboxLog[]
  exitCode        Int?
  executionTimeMs Int?

  // Results
  stdout    String?        @db.Text
  stderr    String?        @db.Text
  error     String?        @db.Text
  artifacts CodeArtifact[] // NEW - generated files

  previewUrl   String? // E2B sandbox preview URL
  createdFiles String[]

  // Metadata
  metadata    Json? // store additional context
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([status])
  @@index([triggerJobId])
  @@index([createdAt])
}

model SandboxLog {
  id          String        @id @default(uuid())
  executionId String
  type        String // "stdout" | "stderr" | "system"
  content     String        @db.Text
  timestamp   DateTime      @default(now())
  execution   CodeExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([timestamp])
}

// NEW: Store generated files/artifacts
model CodeArtifact {
  id          String        @id @default(uuid())
  executionId String
  filename    String
  path        String
  content     String        @db.Text
  mimeType    String
  size        Int // in bytes
  url         String? // S3/CDN URL if uploaded
  createdAt   DateTime      @default(now())
  execution   CodeExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([filename])
}

// NEW: Track sandbox usage for billing/quotas
model SandboxUsage {
  id              String          @id @default(uuid())
  userId          String
  sandboxTemplate SandboxTemplate
  executionTimeMs Int
  cpuTimeMs       Int?
  memoryUsedMb    Int?
  cost            Decimal         @db.Decimal(10, 4) // in USD
  executedAt      DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([executedAt])
}

model ProjectMember {
  id        String      @id @default(uuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  User      User        @relation(fields: [userId], references: [id])
  Project   Project     @relation(fields: [projectId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isFlagged Boolean  @default(false)

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model ChatRoom {
  id        String            @id @default(cuid())
  name      String?
  isGroup   Boolean           @default(false)
  members   ChatParticipant[]
  messages  Message[]
  createdAt DateTime          @default(now())
}

model ChatParticipant {
  id         String @id @default(cuid())
  chatRoomId String
  userId     String

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([chatRoomId, userId])
}

model Message {
  id         String      @id @default(cuid())
  chatRoomId String
  senderId   String
  content    String
  type       MessageType @default(TEXT)
  sentAt     DateTime    @default(now())

  sender   User          @relation("UserMessages", fields: [senderId], references: [id])
  chatRoom ChatRoom      @relation(fields: [chatRoomId], references: [id])
  readers  MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}

model DSAResult {
  id        String    @id @default(uuid())
  userId    String
  code      String
  language  String
  output    String?
  status    RunStatus @default(PENDING)
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id])
}

model InterviewSession {
  id          String    @id @default(uuid())
  hostUserId  String
  guestUserId String?
  code        String?
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  Host        User      @relation("host", fields: [hostUserId], references: [id])
  Guest       User?     @relation("guest", fields: [guestUserId], references: [id])
}

model Job {
  id           String           @id @default(uuid())
  title        String
  company      String
  description  String
  tags         String[]
  postedBy     String
  createdAt    DateTime         @default(now())
  postedByUser User             @relation(fields: [postedBy], references: [id])
  applications JobApplication[]
}

model JobApplication {
  id        String            @id @default(uuid())
  userId    String
  jobId     String
  resumeUrl String
  status    ApplicationStatus @default(PENDING)
  User      User              @relation(fields: [userId], references: [id])
  Job       Job               @relation(fields: [jobId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LINK
}
